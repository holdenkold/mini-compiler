// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  POLINAGRINK1DDB
// DateTime: 6/19/2020 11:05:32 PM
// UserName: polinagrinko
// Input file <parser.y - 6/19/2020 11:05:26 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Return=10,Assign=11,LogicalSum=12,
    LogicalProduct=13,BitSum=14,BitProduct=15,Equals=16,NotEquals=17,Greater=18,
    GreaterEquals=19,Lesser=20,LesserEquals=21,Plus=22,Minus=23,Multiplies=24,
    Divides=25,LogicalNeg=26,BitNeg=27,OpenPar=28,ClosePar=29,OpenBr=30,
    CloseBr=31,Semicolon=32,Eof=33,Endl=34,Ident=35,IntNumber=36,
    RealNumber=37,BoolValue=38,String=39,Int=40,Double=41,Bool=42};

public struct ValueType
#line 5 "parser.y"
{
public string  val;
public char    type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[11];
  private static State[] states = new State[18];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "compound_statement", "declaration_list", "declaration", 
      "types", };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{30,6},new int[]{-3,4});
    states[4] = new State(new int[]{33,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{31,7,40,14,41,15,42,16},new int[]{-4,8,-5,17,-6,11});
    states[7] = new State(-3);
    states[8] = new State(new int[]{31,9,40,14,41,15,42,16},new int[]{-5,10,-6,11});
    states[9] = new State(-4);
    states[10] = new State(-6);
    states[11] = new State(new int[]{35,12});
    states[12] = new State(new int[]{32,13});
    states[13] = new State(-7);
    states[14] = new State(-8);
    states[15] = new State(-9);
    states[16] = new State(-10);
    states[17] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{4,-3,33});
    rules[3] = new Rule(-3, new int[]{30,31});
    rules[4] = new Rule(-3, new int[]{30,-4,31});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-4,-5});
    rules[7] = new Rule(-5, new int[]{-6,35,32});
    rules[8] = new Rule(-6, new int[]{40});
    rules[9] = new Rule(-6, new int[]{41});
    rules[10] = new Rule(-6, new int[]{42});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 41 "parser.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
